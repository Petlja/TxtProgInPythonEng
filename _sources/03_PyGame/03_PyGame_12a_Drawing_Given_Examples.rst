Drawing from reference
----------------------

We have just learned how to draw some basic shapes in the PyGame environment using drawing functions. As it was mentioned before, all such images consist of pixels. These are so-called raster, or bitmap, images. We have seen that, in order to draw basic shapes, we need to know the coordinates of pixels that determine each such shape. However, in a more realistic situation these coordinates are not given directly and we need to determine them ourselves. 

If we want to programmatically generate an image using an existing bitmap as a reference, we can determine the coordinates of the points from the given image. We can magnify the image in one of the image viewing programs to get each pixel to look like a square. That can look like this:

.. image:: ../../_images/PyGame/ladder_grid.png
   :width: 300px   
   :align: center 

We can see that this image was generated by drawing 4 horizontal and 2 vertical lines, an also that all 6 lines are black and 1 pixel wide. Since we know that *x* coordinate is counted from left to right and *y* from top to bottom, as well as that counting starts from zero, we can determine the coordinates of the start and end points of all six lines simply by counting.

Ladder
''''''

Read the coordinates from the enlarged image above and write a program that draws ladders like those.


**Hint:** by counting (from zero) we can find that the coordinates of the end points of the left vertical line are (5, 3) and (5, 36). The coordinates of the end points of the other 5 lines are to be determined in the same way.

.. activecode:: PyGame__drawing_ladder_assist
   :nocodelens:
   :enablecopy:
   :modaloutput:
   :includexsrc: src\PyGame\1_Drawing\3_ByGrid\ladder_small.py

   canvas.fill(pg.Color("white")) # paint background

   pg.draw.line(canvas, pg.Color("black"), ( 5, 3), ( 5, 36), 1)  # left side
   pg.draw.line(canvas, pg.Color("black"), (???, ???), (???, ???), 1)  # right side

   pg.draw.line(canvas, pg.Color("black"), (???, ???), (???, ???), 1) # step
   pg.draw.line(canvas, pg.Color("black"), (???, ???), (???, ???), 1) # step
   pg.draw.line(canvas, pg.Color("black"), (???, ???), (???, ???), 1) # step
   pg.draw.line(canvas, pg.Color("black"), (???, ???), (???, ???), 1) # step
   
The real size image is very small, only 20 pixels wide and 40 pixels high. We could also determine the coordinates of the points for larger images by counting, but that would be tedious and prone to errors (that's why we chose such a small image in this example). The good news is that image viewing and editing programs typically show the coordinates of the pixel on which the mouse cursor currently is. The cursor coordinates are usually written somewhere in the status bar at the bottom of the window in which the program is running, often in the lower left corner.

For example, in the *Paint* drawing program, when an image is magnified 8 times and the grid that emphasizes individual pixels is shown, we can easily position the cursor on any pixel and read its coordinates. In this picture, the mouse cursor was on the red pixel, which, as we said earlier, has the coordinates (5, 36).

.. image:: ../../_images/PyGame/read_xy.png
   :width: 600px   
   :align: center 

~~~~

In the following tasks you need to write a program that draws a drawing as similar as possible to the given one. You can see the drawings you need to draw when you click the "Play task" button.

To help you determine the coordinates of important points in a drawing, the program you start by clicking the "Play task" button will, beside the drawing, show the coordinates of the point where the mouse cursor is. To make the reading easier, in all examples the coordinates of all significant points are rounded to 5 pixels (coordinates end with zero or five).

If you want to solve these tasks outside of the web browser, in your programming environment, you can download the images that your programs need to draw, open them in an image viewer, and read the coordinates of the important points there.

.. image:: ../../_images/PyGame/drawing_grid_antenna.png
   :width: 120px
.. image:: ../../_images/PyGame/drawing_grid_balance.png
   :width: 120px                
.. image:: ../../_images/PyGame/drawing_grid_house.png
   :width: 120px                
.. image:: ../../_images/PyGame/drawing_grid_smiley.png
   :width: 120px                
.. image:: ../../_images/PyGame/drawing_grid_trees.png
   :width: 120px                

Antenna
'''''''

Before cable television, television signals were received by antennas that were usually placed on the roofs of people's homes and buildings. In this task one such antenna is to be drawn.

As you can see when you run the example, the drawing consists of seven lines. The width of the vertical line is 4 pixels, the top two horizontal ones 1, the middle two 2, and the bottom two 3 pixels. The color of the background is "skyblue".

.. activecode:: PyGame__drawing_antenna_simple_assist
    :nocodelens:
    :enablecopy:
    :modaloutput:
    :playtask:
    :includexsrc: src\PyGame\1_Drawing\3_ByGrid\antenna_assist.py
   
    pg.draw.line(canvas, color???, (150, y1???,), (150, y2???,), 4)
    pg.draw.line(canvas, ???
    pg.draw.line(canvas, ???
    pg.draw.line(canvas, ???
    pg.draw.line(canvas, ???
    pg.draw.line(canvas, ???
    pg.draw.line(canvas, ???


.. reveal:: PyGame__drawing_antenna_simple_reveal
   :showtitle: Show solution
   :hidetitle: Hide solution

   The complete program is provided, you can try it here as well.
	       
   .. activecode:: PyGame__drawing_antenna_simple_solution
      :nocodelens:
      :enablecopy:
      :modaloutput:
      :includesrc: src\PyGame\1_Drawing\3_ByGrid\antenna.py
                   

Balance scale
'''''''''''''

This drawing consists of a line (whose width is 2) and three triangles. The middle triangle, which represents the support of the balance, is filled with color, so when drawing it the width parameter should be omitted, while for the other two triangles width 2 should be specified.

.. activecode:: PyGame__drawing_balance
   :nocodelens:
   :enablecopy:
   :modaloutput:
   :playtask:
   :includexsrc: src\PyGame\1_Drawing\3_ByGrid\balance_assist.py
   
   canvas.fill(color???)) # paint background green
   pg.draw.line(canvas, color???, (x1???, y1???), (x2???,  y2???), 2) # beam
   
   # support
   pg.draw.polygon(canvas, pg.Color("brown"), [(???, ???), ...
   
   # left pan
   pg.draw.polygon(canvas, pg.Color("brown"), [(???, ???), ...
   
   # right pan
   pg.draw.polygon(canvas, pg.Color("brown"), [(???, ???), ...

.. commented out 

    .. reveal:: PyGame__drawing_balance_reveal
       :showtitle: Show solution
       :hidetitle: Hide solution

       The complete program is provided, you can try it here as well.
               
       .. activecode:: PyGame__drawing_balance_solution
          :nocodelens:
          :enablecopy:
          :modaloutput:
          :includesrc: src\PyGame\1_Drawing\3_ByGrid\balance.py

Smiley
''''''

In this task, the work to be done is a bit more complex. Since the drawing is composed of circles and ellipses, we cannot accurately read all the coordinates and measurements we need directly. What we can do is to read for each ellipse the :math:`x` coordinate of its leftmost and rightmost point ((:math:`X_L` and :math:`X_R`), as well as the :math:`y` coordinate of the highest and lowest point (:math:`Y_T` and :math:`Y_B`). After that, the width and height of the ellipse can be calculated as the differences of the corresponding :math:`x` (for width), and :math:`y` coordinates (for height).

As for the circle, we have various options:

- we can draw the circle as an ellipse inscribed in a square (using the *pg.draw.ellipse* function)
- we can approximate the coordinates of the center of the circle
- if we want to determine the coordinates of the circle center more accurately, we can first find the points :math:`X_L`, :math:`X_R`, :math:`Y_T`, and :math:`Y_B` as we did for ellipses, and then calculate the coordinates of the center using formulas :math:`X_c = {{X_R + X_L} \over 2}` and :math:`Y_c = {{Y_T + Y_B} \over 2}`

.. activecode:: PyGame__drawing_smiley
   :nocodelens:
   :enablecopy:
   :modaloutput:
   :playtask:
   :includexsrc: src\PyGame\1_Drawing\3_ByGrid\smiley_assist.py
   
   canvas.fill(color???) # paint background white
   pg.draw.circle(canvas, color???, (x???, y???), r???)           # head
   pg.draw.ellipse(canvas, color???, (x???, y???, w???, h???))    # left eye
   pg.draw.ellipse(canvas, ???, (???, ???, ???, ???))             # right eye
   pg.draw.ellipse(canvas, ???, (???, ???, ???, ???))             # mouth interior
   pg.draw.ellipse(canvas, ???, (???, ???, ???, ???), thickness?) # mouth edge
   
.. commented out

    .. reveal:: PyGame__drawing_smiley_reveal
       :showtitle: Show solution
       :hidetitle: Hide solution

       The complete program is provided, you can try it here as well.
               
       .. activecode:: PyGame__drawing_smiley_solution
          :nocodelens:
          :enablecopy:
          :modaloutput:
          :includesrc: src\PyGame\1_Drawing\3_ByGrid\smiley.py

House
'''''

The drawing of a house consists of a brown rectangle and a red triangle. We can draw the triangle as a polygon with three vertices. The sun is depicted as an orange circle and the grass as a green rectangle. Mind the order of drawing for the grass and the sun.

It is enough to read the coordinates of the center of the circle representing the Sun approximately. For those who want a little mathematical challenge, note that the coordinates of the center can be more accurately determined similar to the previous task, although the lowest point is not visible and the coordinate :math:`Y_B` cannot be read.

If you want to see how you can determine the coordinates of the center with more accurate reading and calculating, click on the "Determining the center" button.

.. reveal:: PyGame__drawing_house_circle_center_reveal
    :showtitle: Determining the center
    :hidetitle: Hide determining the center

    As in the previous task, let :math:`X_L` and :math:`X_R` denote the :math:`x` coordinates of the leftmost and rightmost point of the circle that represents the Sun, and :math:`Y_T`, :math:`Y_B` the :math:`y` coordinates of the highest and lowest point of that circle. 
    
    We can determine the :math:`x` coordinate of the center as we did in the previous example, :math:`X_C = {{X_R + X_L} \over 2}`.
    
    Since the lowest point of the circle is not visible, we cannot read the value :math:`Y_B`, but we can determine the radius :math:`r` using :math:`r = X_C - X_L` or :math:`r = X_R - X_C`. Now the :math:`y` coordinate of the center is easily obtained: :math:`Y_C = Y_T + r`, so we didn't even need :math:`Y_B`.
    
.. activecode:: PyGame__drawing_house
   :nocodelens:
   :enablecopy:
   :modaloutput:
   :playtask:
   :includexsrc: src\PyGame\1_Drawing\3_ByGrid\house2D_assist.py
   
   canvas.fill(color???) # paint background light gray
   ???
   ???
   pg.draw.rect(canvas, color???, (x???, y???, w???, h???)) # house
   pg.draw.polygon(canvas, color???, [(x1???, y1???), (x2???, y2???), (x3???, y3???)]) # roof

.. commented out

    .. reveal:: PyGame__drawing_house_reveal
       :showtitle: Show solution
       :hidetitle: Hide solution

       The complete program is provided, you can try it here as well.
               
       .. activecode:: PyGame__drawing_house_solution
          :nocodelens:
          :enablecopy:
          :modaloutput:
          :includesrc: src\PyGame\1_Drawing\3_ByGrid\house2D.py
   
Trees
'''''

Three exact same trees are to be drawn, so that each subsequent tree is obtained by moving the previous one to the right. Obviously, this task could have been given by simply describing the first tree and specifying the distance between two adjacent trees. The program that draws the image is given nevertheless, because using an image to specify a task is clearer and simpler.

To make the task a bit more like a real situation (in which there is no image), in this example reading the :math:`x` coordinate is intentionally disabled for the right side of the image. All the required coordinates that you cannot read can be calculated.

.. activecode:: PyGame__drawing_trees
   :nocodelens:
   :enablecopy:
   :modaloutput:
   :playtask:
   :includexsrc: src\PyGame\1_Drawing\3_ByGrid\trees_assist.py
   
.. commented out

    .. reveal:: PyGame__drawing_trees_reveal
       :showtitle: Прикажи решење
       :hidetitle: Сакриј решење

       The complete program is provided, you can try it here as well.
               
       .. activecode:: PyGame__drawing_trees_solution
          :nocodelens:
          :enablecopy:
          :modaloutput:
          :includesrc: src\PyGame\1_Drawing\3_ByGrid\trees.py
